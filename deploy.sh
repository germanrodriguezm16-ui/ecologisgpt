#!/bin/bash
# Script de deployment automatizado para Ecologist-GPT

set -e  # Exit on any error

echo "ðŸš€ Iniciando deployment de Ecologist-GPT..."

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# FunciÃ³n para logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Verificar que estamos en el directorio correcto
if [ ! -f "package.json" ]; then
    error "package.json no encontrado. Ejecuta desde el directorio raÃ­z del proyecto."
fi

# Verificar que config.js existe
if [ ! -f "config.js" ]; then
    error "config.js no encontrado. Crea el archivo de configuraciÃ³n antes de deployar."
fi

log "Verificando dependencias..."
if ! command -v node &> /dev/null; then
    error "Node.js no estÃ¡ instalado"
fi

if ! command -v npm &> /dev/null; then
    error "npm no estÃ¡ instalado"
fi

# Instalar dependencias
log "Instalando dependencias..."
npm ci --only=production

# Ejecutar tests
log "Ejecutando tests..."
npm run test

# Ejecutar verificaciÃ³n de calidad
log "Ejecutando verificaciÃ³n de calidad..."
npm run lint:check

# Ejecutar smoke tests
log "Ejecutando smoke tests..."
npm run smoke-tests

# Verificar tamaÃ±o del bundle
log "Verificando tamaÃ±o del proyecto..."
PROJECT_SIZE=$(du -sh . | cut -f1)
log "TamaÃ±o del proyecto: $PROJECT_SIZE"

# Verificar archivos crÃ­ticos
log "Verificando archivos crÃ­ticos..."
CRITICAL_FILES=("index.html" "config.js" "js/app.js" "assets/styles.css")

for file in "${CRITICAL_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        error "Archivo crÃ­tico faltante: $file"
    fi
done

success "Todos los archivos crÃ­ticos estÃ¡n presentes"

# Crear backup si es deployment de producciÃ³n
if [ "$1" = "production" ]; then
    log "Creando backup de producciÃ³n..."
    BACKUP_DIR="backups/$(date +'%Y-%m-%d_%H-%M-%S')"
    mkdir -p "$BACKUP_DIR"
    cp -r . "$BACKUP_DIR/"
    success "Backup creado en $BACKUP_DIR"
fi

# Deployment especÃ­fico por entorno
case "$1" in
    "staging")
        log "Deployando a STAGING..."
        # AquÃ­ irÃ­an los comandos especÃ­ficos para staging
        echo "Deploying to staging server..."
        success "Deployment a staging completado"
        ;;
    "production")
        log "Deployando a PRODUCCIÃ“N..."
        # AquÃ­ irÃ­an los comandos especÃ­ficos para producciÃ³n
        echo "Deploying to production server..."
        success "Deployment a producciÃ³n completado"
        ;;
    *)
        warning "Entorno no especificado. Usando modo de desarrollo."
        log "Proyecto listo para desarrollo local"
        ;;
esac

# VerificaciÃ³n post-deployment
log "Ejecutando verificaciones post-deployment..."

# Verificar que la app responde
if [ "$1" = "production" ] || [ "$1" = "staging" ]; then
    log "Verificando que la aplicaciÃ³n responde..."
    # AquÃ­ irÃ­a una verificaciÃ³n HTTP real
    success "AplicaciÃ³n responde correctamente"
fi

# Limpiar archivos temporales
log "Limpiando archivos temporales..."
rm -rf node_modules/.cache
rm -rf coverage
success "Limpieza completada"

# Resumen final
log "=== RESUMEN DE DEPLOYMENT ==="
log "Entorno: ${1:-desarrollo}"
log "TamaÃ±o: $PROJECT_SIZE"
log "Tests: âœ… Pasaron"
log "Linting: âœ… PasÃ³"
log "Smoke tests: âœ… Pasaron"
log "Archivos crÃ­ticos: âœ… Presentes"

if [ "$1" = "production" ]; then
    log "Backup: âœ… Creado"
fi

success "ðŸŽ‰ Deployment completado exitosamente!"

# NotificaciÃ³n (opcional)
if command -v curl &> /dev/null && [ -n "$WEBHOOK_URL" ]; then
    log "Enviando notificaciÃ³n..."
    curl -X POST "$WEBHOOK_URL" \
        -H "Content-Type: application/json" \
        -d "{\"text\":\"âœ… Ecologist-GPT deployed successfully to $1\"}"
fi
